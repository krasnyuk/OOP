@model IEnumerable<MemberRMS.User>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_dashboard.cshtml";


}
<!-- We support more than 40 localizations -->
<script type="text/ecmascript" src="../../Scripts/js/trirand/i18n/grid.locale-en.js"></script>
<!-- This is the Javascript file of jqGrid -->
<script type="text/ecmascript" src="../../Scripts/js/trirand/jquery.jqGrid.min.js"></script>
<!-- A link to a Boostrap and jqGrid Bootstrap CSS siles-->
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/User/bootstrap-datepicker.js"></script>
<script src="~/Scripts/User/bootstrap3-typeahead.js"></script>
<link href="~/Scripts/User/bootstrap-datepicker.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap.min.js"></script>

<link rel="stylesheet" type="text/css" media="screen" href="../../Scripts/css/trirand/ui.jqgrid-bootstrap.css?r=591" />
<script>
    $.jgrid.defaults.width = 1280;
    $.jgrid.defaults.height = 500;
    $.jgrid.defaults.responsive = false;
    $.jgrid.defaults.styleUI = 'Bootstrap';
</script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

<table id="jqg"></table>
<div id="jpager"></div>

<script type="text/javascript">
$(document).ready(function () {
    $("#jqg").jqGrid({
        url: '@Url.Action("UsersData","Users")',
        datatype: "json",
        colNames: ['UserID', 'FirstName', 'LastName', 'Telephone', 'Mail', 'Birthday'],
        colModel: [
            { name: 'UserID', index: 'UserID', width: 40, sorttype: "int", editable: true, edittype: 'text', key: true },
            { name: 'FirstName', index: 'FirstName', editable: true, edittype: 'text', width: 70 },
            { name: 'LastName', index: 'LastName', editable: true, edittype: 'text', width: 50 },
           
            {
                name: 'Telephone', index: 'Telephone', editable: true, edittype: 'text', width: 70,
                editrules: {
                    number: true,
                    minValue: 5,
                    maxValue: 100000000000000000000,
                    required: true
                }
            },
            {
                name: 'Mail', index: 'Mail', editable: true, edittype: 'text', width: 80,
                
            },
            {
                name: 'Birthday',
                index: 'Birthday',
                editable: true,
                edittype: 'text',
                width: 80,
                editoptions: {
                    // dataInit is the client-side event that fires upon initializing the toolbar search field for a column
                    // use it to place a third party control to customize the toolbar
                    dataInit: function(element) {
                        $(element).datepicker({
                            autoclose: true,
                            format: 'yyyy-mm-dd',
                            orientation: 'bottom'
                        });
                    }
                }
            }
        ],
            rowNum: 100,
                rowList: [10, 20, 30],
                width: 1000,
                // height : 300,
                pager: '#jpager',
                autowidth: true,
                height:"100%",
                loadonce:true,
                sortname: 'UserID',
                sortorder: "desc",
                caption: "List User"
            });
        function listUser() {
            //alert("Test");
            $.getJSON("/User/UserData", null, function (data) {
                var div = $('#Birthday');
                var str = "";

                $.each(data, function (i, item) {
                    //  str += item.CategoryID + ":" + item.Title + ";";
                    div.append("<option value='" + item.UserID + "'>" + item.Title + "</option>");
                });
               // alert(str);

            });

            };

            @*function update(act) {

                return {
                    closeAfterAdd: true, // закрыть после добавления

                    width: 400,
                    closeAfterEdit: true, // закрыть после редактирования
                    reloadAfterSubmit: true, // обновление
                    drag: true,
                    afterShowForm: listUser,

                    onclickSubmit: function (params) {

                        var list = $("#jqg");
                        var selectedRow = list.getGridParam("selrow");
                        //
                            console.log(selectedRow);
                        rowData = list.getRowData(selectedRow);
                            var array = $.map(rowData, function (value, index) {
                                return [value];
                            });
                            console.log(array);
                            console.log(rowData);
                            selectedRow = array[0];
                            console.log(selectedRow);
                        //////
                        if (act === "add")
                            params.url= '@Url.Action("Create")';
                        else if (act === "del") {
                            params.url = '@Url.Action("Delete")';
                        } else if (act === "edit")
                            params.url = '@Url.Action("Edit")';
                    },
                    afterSubmit: function (response, postdata) {
                        // обновление грида
                        $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                        return [true, "", 0];
                    }
                };
            }*@
        // This function gets called whenever an edit dialog is opened

            $("#jqg").jqGrid('navGrid', '#jpager', {

                    search: true,
                    searchtext: "",
                    refresh: true,
                    height : 70, // dddddddddddddddddddddd
                    add: true, // добавление
                    del: true, // удаление
                    edit: true, // редактирование
                    view: true, // просмотр записи
                    viewtext: "",
                    viewtitle: "",
                    addtext: "",
                    edittext: "",
                    deltext: ""
            },
            // options for the Edit Dialog
                {
                    editCaption: "The Edit Dialog",
                    recreateForm: true,
                    viewPagerButtons: false,
                    closeAfterAdd: true, // закрыть после добавления
                    width: 400,
                    closeAfterEdit: true, // закрыть после редактирования
                    reloadAfterSubmit: true, // обновление
                    drag: true,
                    afterShowForm: listUser,
                    onclickSubmit: function (params) {
                        var list = $("#jqg");
                        var selectedRow = list.getGridParam("selrow");
                        rowData = list.getRowData(selectedRow);
                        params.url = '@Url.Action("Edit")';
                    },
                    afterSubmit: function (response, postdata) {
                        // обновление грида
                        $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                        return [true, "", 0];
                    }
                    ,
                    errorTextFormat: function (data) {
                        return 'Error: ' + data.responseText
                    }
                },
                // options for the Add Dialog
                {
                    editCaption: "The Create Dialog",
                    recreateForm: true,
                    viewPagerButtons: false,
                    closeAfterAdd: true, // закрыть после добавления
                    width: 400,
                    closeAfterEdit: true, // закрыть после редактирования
                    reloadAfterSubmit: true, // обновление
                    drag: true,
                    afterShowForm: listUser,
                    onclickSubmit: function (params) {
                        var list = $("#jqg");
                       var selectedRow = list.getGridParam("selrow");
                       rowData = list.getRowData(selectedRow);
                        params.url = '@Url.Action("Create")';
                    },
                    afterSubmit: function (response, postdata) {
                        // обновление грида
                        $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                        return [true, "", 0];
                    }
                    ,
                    errorTextFormat: function (data) {
                        return 'Error: ' + data.responseText;
                    }
                },
                // options for the Delete Dailog
               {
                   editCaption: "The Create Dialog",
                   recreateForm: true,
                   viewPagerButtons: false,
                   closeAfterAdd: true, // закрыть после добавления
                   width: 400,
                   closeAfterEdit: true, // закрыть после редактирования
                // обновление   url :'@Url.Action("Delete")',
                   mtype: "POST",
                   reloadAfterSubmit: true,
                   serializeDelData: function (postdata) {
                       var selectedrowindex = jQuery("#jqg").jqGrid('getGridParam', 'selrow');
                       var dataFromCellByColumnIndex = jQuery('#jqg').jqGrid('getCell', selectedrowindex, 0);
                       console.log(selectedrowindex);
                       console.log(dataFromCellByColumnIndex);
                      postdata.id = dataFromCellByColumnIndex;
                       return {id: postdata.id}
                   },

                  afterSubmit: function (response, postdata) {
                       // обновление грида
                       $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                       return [true, "", 0];
                   }
               });
    function validatePositive(value, column) {
        if (isNaN(value) && value < 0)
            return [false, "Please enter a positive value or correct value"];
        else
            return [true, ""];
    }
        });
</script>